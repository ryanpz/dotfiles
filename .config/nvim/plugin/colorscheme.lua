local palette = {
  bg = 'NONE',
  fg = '#ffffff',
  selection = '#44475a',
  comment = '#828282',
  red = '#ff5555',
  orange = '#ffb86c',
  yellow = '#f1fa8c',
  green = '#50fa7b',
  purple = '#bd93f9',
  cyan = '#8be9fd',
  pink = '#ff79c6',
  bright_red = '#ff6e6e',
  bright_green = '#69ff94',
  bright_yellow = '#ffffa5',
  bright_blue = '#d6acff',
  bright_magenta = '#ff92df',
  bright_cyan = '#a4ffff',
  menu = '#202020',
  menu_alt = '#242424',
  visual = '#3e4452',
  nontext = '#3b4048',
  black = '#191a21',
  bg_added = '#00381f',
  fg_added = '#a0e0a0',
  bg_changed = '#004065',
  fg_changed = '#b9c6e0',
  bg_removed = '#4f1119',
  fg_removed = '#ffbfbf',
  search_bg = '#e8ff00',
  search_fg = '#000000',
  inc_search_bg = '#ff9200',
}

local set_groups = function(p)
  local groups = {
    ColorColumn = { bg = p.selection },
    Cursor = { reverse = true },
    lCursor = { link = 'Cursor' },
    CursorIM = { link = 'Cursor' },
    CursorColumn = { bg = p.black },
    CursorLine = { bg = p.selection },
    CursorLineNr = { fg = p.fg, bold = true },
    Directory = { fg = p.cyan },
    EndOfBuffer = { fg = p.nontext },
    ErrorMsg = { fg = p.bright_red },
    WinSeparator = { fg = p.comment },
    Folded = { fg = p.comment },
    SignColumn = { bg = p.bg },
    LineNr = { fg = p.comment },
    MatchParen = { fg = p.fg, underline = true },
    ModeMsg = { link = 'Keyword' },
    MoreMsg = { link = 'Keyword' },
    NonText = { fg = p.nontext },
    Normal = { fg = p.fg, bg = p.bg },
    NormalFloat = { fg = p.fg, bg = p.menu_alt },
    NormalNC = { link = 'Normal' },
    FloatBorder = { fg = p.fg },
    Pmenu = { fg = p.fg, bg = p.menu },
    PmenuSel = { fg = p.fg, bg = p.selection },
    PmenuSbar = { bg = p.menu_alt },
    PmenuThumb = { bg = p.selection },
    Question = { fg = p.purple },
    QuickFixLine = { fg = p.black, bg = p.yellow },
    Search = { fg = p.search_fg, bg = p.search_bg },
    IncSearch = { fg = p.search_fg, bg = p.inc_search_bg },
    CurSearch = { link = 'IncSearch' },
    SpecialKey = { fg = p.nontext },
    SpellBad = { fg = p.bright_red, underline = true },
    SpellCap = { fg = p.yellow },
    SpellLocal = { fg = p.yellow },
    SpellRare = { fg = p.yellow },
    StatusLine = { fg = p.comment, bold = true },
    StatusLineNC = { fg = p.comment },
    TabLine = { fg = p.comment, bg = p.menu_alt },
    TabLineFill = { link = 'TabLine' },
    TabLineSel = { fg = p.comment, bold = true },
    Title = { fg = p.cyan },
    Visual = { bg = p.visual },
    WarningMsg = { fg = p.yellow },
    WildMenu = { fg = p.black, bg = p.fg },
    Comment = { fg = p.comment },
    Constant = { fg = p.purple },
    String = { fg = p.yellow },
    Character = { fg = p.pink },
    Number = { link = 'Constant' },
    Float = { link = 'Constant' },
    Boolean = { link = 'Constant' },
    Identifier = { fg = p.fg },
    Function = { fg = p.green },
    Statement = { fg = p.pink },
    Conditional = { fg = p.pink },
    Repeat = { fg = p.pink },
    Label = { fg = p.pink },
    Operator = { fg = p.pink },
    Keyword = { fg = p.pink },
    Exception = { fg = p.pink },
    PreProc = { fg = p.pink },
    Include = { fg = p.pink },
    Define = { fg = p.pink },
    Macro = { fg = p.pink },
    PreCondit = { fg = p.pink },
    Type = { fg = p.cyan },
    StorageClass = { fg = p.pink },
    Structure = { fg = p.pink },
    Typedef = { fg = p.pink },
    Special = { fg = p.pink },
    SpecialChar = { link = 'Keyword' },
    Tag = { fg = p.cyan },
    Delimiter = { link = 'Normal' },
    SpecialComment = { fg = p.cyan, italic = true },
    Underlined = { fg = p.cyan, underline = true },
    Error = { fg = p.bright_red },
    Todo = { fg = p.purple, bold = true, italic = true },
    DiffAdd = { fg = p.fg_added, bg = p.bg_added },
    DiffChange = { fg = p.fg_changed, bg = p.bg_changed },
    DiffDelete = { fg = p.fg_removed, bg = p.bg_removed },
    DiffText = { link = 'DiffChange' },
    DiagnosticError = { fg = p.red },
    DiagnosticWarn = { fg = p.yellow },
    DiagnosticInfo = { fg = p.cyan },
    DiagnosticHint = { fg = p.cyan },
    DiagnosticSignError = { fg = p.red },
    DiagnosticSignWarn = { fg = p.yellow },
    DiagnosticSignInfo = { fg = p.cyan },
    DiagnosticSignHint = { fg = p.cyan },
    ['@variable'] = { fg = p.fg },
    ['@variable.builtin'] = { fg = p.purple },
    ['@variable.parameter'] = { fg = p.orange },
    ['@variable.parameter.reference'] = { fg = p.orange },
    ['@variable.member'] = { fg = p.orange },
    ['@constant'] = { fg = p.purple },
    ['@constant.builtin'] = { fg = p.purple },
    ['@constant.macro'] = { fg = p.cyan },
    ['@module'] = { fg = p.orange },
    ['@label'] = { fg = p.cyan },
    ['@string'] = { fg = p.yellow },
    ['@string.regexp'] = { fg = p.pink },
    ['@string.escape'] = { fg = p.cyan },
    ['@string.special.symbol'] = { fg = p.purple },
    ['@character'] = { fg = p.green },
    ['@boolean'] = { fg = p.purple },
    ['@number'] = { fg = p.purple },
    ['@number.float'] = { fg = p.green },
    ['@type'] = { fg = p.bright_cyan },
    ['@type.builtin'] = { fg = p.cyan, italic = true },
    ['@type.qualifier'] = { fg = p.pink },
    ['@attribute'] = { fg = p.cyan },
    ['@property'] = { fg = p.purple },
    ['@function'] = { fg = p.green },
    ['@function.builtin'] = { fg = p.cyan },
    ['@function.macro'] = { fg = p.green },
    ['@function.method'] = { fg = p.green },
    ['@constructor'] = { fg = p.cyan },
    ['@operator'] = { fg = p.pink },
    ['@keyword'] = { fg = p.pink },
    ['@keyword.function'] = { fg = p.cyan },
    ['@keyword.operator'] = { fg = p.pink, bold = true },
    ['@keyword.import'] = { fg = p.pink },
    ['@keyword.repeat'] = { fg = p.pink },
    ['@keyword.exception'] = { fg = p.purple },
    ['@keyword.conditional'] = { fg = p.pink },
    ['@keyword.include'] = { fg = p.pink },
    ['@punctuation.delimiter'] = { fg = p.fg },
    ['@punctuation.bracket'] = { fg = p.fg },
    ['@markup'] = { fg = p.orange },
    ['@markup.strong'] = { fg = p.orange, bold = true },
    ['@markup.underline'] = { fg = p.orange },
    ['@markup.emphasis'] = { fg = p.yellow, italic = true },
    ['@markup.heading'] = { fg = p.pink, bold = true },
    ['@markup.link'] = { fg = p.pink, underline = false },
    ['@markup.link.label.symbol'] = { fg = p.purple },
    ['@markup.link.url'] = { fg = p.cyan, underline = true, italic = true },
    ['@markup.raw'] = { fg = p.yellow },
    ['@markup.list'] = { fg = p.cyan },
    ['@tag'] = { fg = p.pink },
    ['@tag.attribute'] = { fg = p.green },
    ['@tag.delimiter'] = { fg = p.fg },
    ['@error'] = { link = 'Error' },
    ['@lsp.type.class'] = { fg = p.cyan },
    ['@lsp.type.decorator'] = { fg = p.green },
    ['@lsp.type.enum'] = { fg = p.cyan },
    ['@lsp.type.enumMember'] = { fg = p.purple },
    ['@lsp.type.function'] = { fg = p.green },
    ['@lsp.type.interface'] = { fg = p.cyan },
    ['@lsp.type.macro'] = { fg = p.cyan },
    ['@lsp.type.method'] = { fg = p.green },
    ['@lsp.type.namespace'] = { fg = p.orange },
    ['@lsp.type.parameter'] = { fg = p.orange },
    ['@lsp.type.property'] = { fg = p.purple },
    ['@lsp.type.struct'] = { fg = p.cyan },
    ['@lsp.type.type'] = { fg = p.bright_cyan },
    ['@lsp.type.variable'] = { fg = p.fg },
  }

  for group, parameters in pairs(groups) do
    vim.api.nvim_set_hl(0, group, parameters)
  end
end

vim.o.termguicolors = true
if vim.g.colors_name then
  vim.cmd.highlight('clear')
  vim.cmd.syntax('reset')
end
vim.g.colors_name = 'rycolor'

set_groups(palette)

vim.api.nvim_create_autocmd('BufEnter', {
  pattern = '*',
  callback = function()
    vim.cmd.match('ColorColumn /\\%>79v.*\\%<81v/')
  end,
})
