local palette = {
  bg = { gui = 'NONE', cterm = 'NONE' },
  fg = { gui = '#ffffff', cterm = 'White' },
  black = { gui = '#000000', cterm = 'Black' },
  red = { gui = '#ff6060', cterm = 'Red' },
  green = { gui = '#60ff60', cterm = 'Green' },
  yellow = { gui = '#ffff60', cterm = 'Yellow' },
  blue = { gui = '#00bbff', cterm = 'Blue' },
  cyan = { gui = '#00ffff', cterm = 'Cyan' },
  white = { gui = '#ffffff', cterm = 'White' },
  gray = { gui = '#909090', cterm = 'Gray' },
  orange = { gui = '#ffa500', cterm = 'DarkYellow' },
  menu_bg = { gui = '#333333', cterm = 'Black' },
  menu_bg_alt = { gui = '#202020', cterm = 'Black' },
  highlight_bg = { gui = '#444444', cterm = 'DarkGray' },
  selection_bg = { gui = '#a8a8a8', cterm = 'DarkGray' },
  added_bg = { gui = '#00381f', cterm = 'DarkGreen' },
  added_fg = { gui = '#a0e0a0', cterm = 'Black' },
  changed_bg = { gui = '#004065', cterm = 'DarkBlue' },
  changed_fg = { gui = '#b9c6e0', cterm = 'Black' },
  removed_bg = { gui = '#4f1119', cterm = 'DarkRed' },
  removed_fg = { gui = '#ffbfbf', cterm = 'Black' },
  error_bg = { gui = '#ff0000', cterm = 'DarkRed' },
}

local function hl(fg, bg, opts)
  local result = {}
  if fg then
    result.fg = palette[fg].gui
    result.ctermfg = palette[fg].cterm
  end
  if bg then
    result.bg = palette[bg].gui
    result.ctermbg = palette[bg].cterm
  end
  if opts and opts.sp then
    opts.sp = palette[opts.sp].gui
  end
  return vim.tbl_extend('force', result, opts or {})
end

local groups = {
  ColorColumn = hl(nil, 'highlight_bg'),
  Conceal = hl('gray'),
  CurSearch = hl('black', 'orange'),
  Cursor = { reverse = true },
  lCursor = { link = 'Cursor' },
  CursorIM = { link = 'Cursor' },
  CursorColumn = hl(nil, 'highlight_bg'),
  CursorLine = hl(nil, 'highlight_bg'),
  Directory = { bold = true },
  DiffAdd = hl('added_fg', 'added_bg'),
  DiffChange = hl('changed_fg', 'changed_bg'),
  DiffDelete = hl('removed_fg', 'removed_bg'),
  DiffText = hl('black', 'blue'),
  EndOfBuffer = { link = 'Normal' },
  TermCursor = { link = 'Cursor' },
  ErrorMsg = hl('white', 'error_bg'),
  WinSeparator = { link = 'Normal' },
  Folded = hl('gray'),
  FoldColumn = { link = 'Normal' },
  SignColumn = { link = 'Normal' },
  IncSearch = { link = 'CurSearch' },
  Substitute = { link = 'Search' },
  LineNr = { link = 'Normal' },
  LineNrAbove = { link = 'Normal' },
  LineNrBelow = { link = 'Normal' },
  CursorLineNr = { bold = true },
  CursorLineFold = { link = 'Normal' },
  CursorLineSign = { link = 'Normal' },
  MatchParen = hl(nil, 'highlight_bg'),
  ModeMsg = { bold = true },
  MsgArea = { link = 'Normal' },
  MsgSeparator = { link = 'Normal' },
  MoreMsg = { link = 'Normal' },
  NonText = { link = 'Normal' },
  Normal = hl('fg', 'bg'),
  NormalFloat = hl('fg', 'menu_bg'),
  FloatBorder = hl('gray'),
  FloatTitle = { link = 'Title' },
  FloatFooter = { link = 'FloatTitle' },
  NormalNC = { link = 'Normal' },
  Pmenu = hl('fg', 'menu_bg'),
  PmenuSel = { reverse = true },
  PmenuKind = { link = 'Pmenu' },
  PmenuKindSel = { link = 'PmenuSel' },
  PmenuExtra = { link = 'Pmenu' },
  PmenuExtraSel = { link = 'PmenuSel' },
  PmenuSbar = hl(nil, 'menu_bg_alt'),
  PmenuThumb = hl(nil, 'highlight_bg'),
  PmenuMatch = { bold = true },
  PmenuMatchSel = { bold = true },
  ComplMatchIns = { link = 'Normal' },
  Question = { link = 'Normal' },
  QuickFixLine = hl('fg', 'highlight_bg', { bold = true }),
  Search = { link = 'Visual' },
  SnippetTabstop = hl(nil, 'highlight_bg'),
  SpecialKey = { link = 'Normal' },
  SpellBad = hl('red', nil, { underline = true }),
  SpellCap = hl('cyan', nil, { underline = true }),
  SpellLocal = hl('yellow', nil, { underline = true }),
  SpellRare = hl('yellow', nil, { underline = true }),
  StatusLine = { link = 'Normal' },
  StatusLineNC = hl('gray'),
  StatusLineTerm = { link = 'Normal' },
  StatusLineTermNC = { link = 'StatusLineNC' },
  TabLine = { reverse = true },
  TabLineFill = { reverse = true },
  TabLineSel = { bold = true },
  Title = { bold = true },
  Visual = hl('black', 'selection_bg'),
  VisualNOS = { link = 'Visual' },
  WarningMsg = hl('yellow'),
  Whitespace = { link = 'Normal' },
  WildMenu = { link = 'PmenuSel' },
  WinBar = { bold = true },
  WinBarNC = { link = 'WinBar' },
  Comment = { link = 'Normal' },
  Constant = { link = 'Normal' },
  String = { link = 'Normal' },
  Character = { link = 'Normal' },
  Number = { link = 'Normal' },
  Boolean = { link = 'Normal' },
  Float = { link = 'Normal' },
  Identifier = { link = 'Normal' },
  Function = { link = 'Normal' },
  Statement = { link = 'Normal' },
  Conditional = { link = 'Normal' },
  Repeat = { link = 'Normal' },
  Label = { link = 'Normal' },
  Operator = { link = 'Normal' },
  Keyword = { link = 'Normal' },
  Exception = { link = 'Normal' },
  PreProc = { link = 'Normal' },
  Include = { link = 'Normal' },
  Define = { link = 'Normal' },
  Macro = { link = 'Normal' },
  PreCondit = { link = 'Normal' },
  Type = { link = 'Normal' },
  StorageClass = { link = 'Normal' },
  Structure = { link = 'Normal' },
  Typedef = { link = 'Normal' },
  Special = { link = 'Normal' },
  SpecialChar = { link = 'Normal' },
  Tag = { link = 'Normal' },
  Delimiter = { link = 'Normal' },
  SpecialComment = { link = 'Normal' },
  Debug = { link = 'Normal' },
  Underlined = hl('fg', nil, { underline = true }),
  Ignore = { link = 'Normal' },
  Error = hl('white', 'error_bg'),
  Todo = { link = 'Normal' },
  Added = hl('green'),
  Changed = hl('cyan'),
  Removed = hl('red'),
  DiagnosticError = hl('red'),
  DiagnosticWarn = hl('orange'),
  DiagnosticInfo = hl('cyan'),
  DiagnosticHint = hl('cyan'),
  DiagnosticOk = hl('green'),
  DiagnosticVirtualTextError = { link = 'DiagnosticError' },
  DiagnosticVirtualTextWarn = { link = 'DiagnosticWarn' },
  DiagnosticVirtualTextInfo = { link = 'DiagnosticInfo' },
  DiagnosticVirtualTextHint = { link = 'DiagnosticHint' },
  DiagnosticVirtualTextOk = { link = 'DiagnosticOk' },
  DiagnosticUnderlineError = hl('red', nil, { sp = 'red', underline = true }),
  DiagnosticUnderlineWarn = hl('orange', nil, { sp = 'orange', underline = true }),
  DiagnosticUnderlineInfo = hl('cyan', nil, { sp = 'cyan', underline = true }),
  DiagnosticUnderlineHint = hl('cyan', nil, { sp = 'cyan', underline = true }),
  DiagnosticUnderlineOk = hl('green', nil, { sp = 'green', underline = true }),
  DiagnosticFloatingError = { link = 'DiagnosticError' },
  DiagnosticFloatingWarn = { link = 'DiagnosticWarn' },
  DiagnosticFloatingInfo = { link = 'DiagnosticInfo' },
  DiagnosticFloatingHint = { link = 'DiagnosticHint' },
  DiagnosticFloatingOk = { link = 'DiagnosticOk' },
  DiagnosticSignError = { link = 'DiagnosticError' },
  DiagnosticSignWarn = { link = 'DiagnosticWarn' },
  DiagnosticSignInfo = { link = 'DiagnosticInfo' },
  DiagnosticSignHint = { link = 'DiagnosticHint' },
  DiagnosticSignOk = { link = 'DiagnosticOk' },
  DiagnosticDeprecated = { strikethrough = true },
  DiagnosticUnnecessary = { link = 'Normal' },
  ['@variable'] = { link = 'Normal' },
  ['@variable.builtin'] = { link = 'Normal' },
  ['@variable.parameter'] = { link = 'Normal' },
  ['@variable.parameter.builtin'] = { link = 'Normal' },
  ['@variable.member'] = { link = 'Normal' },
  ['@constant'] = { link = 'Normal' },
  ['@constant.builtin'] = { link = 'Normal' },
  ['@constant.macro'] = { link = 'Normal' },
  ['@module'] = { link = 'Normal' },
  ['@module.builtin'] = { link = 'Normal' },
  ['@label'] = { link = 'Normal' },
  ['@string'] = { link = 'Normal' },
  ['@character'] = { link = 'Normal' },
  ['@character.special'] = { link = 'Normal' },
  ['@boolean'] = { link = 'Normal' },
  ['@number'] = { link = 'Normal' },
  ['@number.float'] = { link = 'Normal' },
  ['@type'] = { link = 'Normal' },
  ['@type.builtin'] = { link = 'Normal' },
  ['@type.definition'] = { link = 'Normal' },
  ['@type.qualifier'] = { link = 'Normal' },
  ['@attribute'] = { link = 'Normal' },
  ['@attribute.builtin'] = { link = 'Normal' },
  ['@property'] = { link = 'Normal' },
  ['@function'] = { link = 'Normal' },
  ['@function.builtin'] = { link = 'Normal' },
  ['@function.call'] = { link = 'Normal' },
  ['@function.macro'] = { link = 'Normal' },
  ['@function.method'] = { link = 'Normal' },
  ['@function.method.call'] = { link = 'Normal' },
  ['@constructor'] = { link = 'Normal' },
  ['@operator'] = { link = 'Normal' },
  ['@keyword'] = { link = 'Normal' },
  ['@keyword.coroutine'] = { link = 'Normal' },
  ['@keyword.function'] = { link = 'Normal' },
  ['@keyword.operator'] = { link = 'Normal' },
  ['@keyword.import'] = { link = 'Normal' },
  ['@keyword.type'] = { link = 'Normal' },
  ['@keyword.modifier'] = { link = 'Normal' },
  ['@keyword.repeat'] = { link = 'Normal' },
  ['@keyword.return'] = { link = 'Normal' },
  ['@keyword.debug'] = { link = 'Normal' },
  ['@keyword.exception'] = { link = 'Normal' },
  ['@keyword.conditional'] = { link = 'Normal' },
  ['@keyword.conditional.ternary'] = { link = 'Normal' },
  ['@keyword.directive'] = { link = 'Normal' },
  ['@keyword.directive.define'] = { link = 'Normal' },
  ['@punctuation.delimiter'] = { link = 'Normal' },
  ['@punctuation.bracket'] = { link = 'Normal' },
  ['@punctuation.special'] = { link = 'Normal' },
  ['@comment'] = { link = 'Normal' },
  ['@comment.documentation'] = { link = 'Normal' },
  ['@comment.error'] = { link = 'Normal' },
  ['@comment.warning'] = { link = 'Normal' },
  ['@comment.todo'] = { link = 'Normal' },
  ['@comment.note'] = { link = 'Normal' },
  ['@markup.strong'] = { link = 'Normal' },
  ['@markup.italic'] = { link = 'Normal' },
  ['@markup.strikethrough'] = { link = 'Normal' },
  ['@markup.underline'] = { link = 'Normal' },
  ['@markup.heading'] = { link = 'Normal' },
  ['@markup.quote'] = { link = 'Normal' },
  ['@markup.math'] = { link = 'Normal' },
  ['@markup.link'] = { link = 'Normal' },
  ['@markup.link.label'] = { link = 'Normal' },
  ['@markup.link.url'] = { link = 'Normal' },
  ['@markup.raw'] = { link = 'Normal' },
  ['@markup.raw.block'] = { link = 'Normal' },
  ['@markup.list'] = { link = 'Normal' },
  ['@markup.list.checked'] = { link = 'Normal' },
  ['@markup.list.unchecked'] = { link = 'Normal' },
  ['@diff.plus'] = { link = 'Added' },
  ['@diff.minus'] = { link = 'Removed' },
  ['@diff.delta'] = { link = 'Changed' },
  ['@tag'] = { link = 'Normal' },
  ['@tag.builtin'] = { link = 'Normal' },
  ['@tag.attribute'] = { link = 'Normal' },
  ['@tag.delimiter'] = { link = 'Normal' },
}

if vim.g.colors_name then
  vim.cmd.highlight('clear')
  vim.cmd.syntax('reset')
end
vim.g.colors_name = 'rycolor'

for group, parameters in pairs(groups) do
  vim.api.nvim_set_hl(0, group, parameters)
end

vim.api.nvim_create_autocmd('FileType', {
  callback = function()
    if vim.bo.buftype ~= '' then
      return
    end
    vim.cmd.match('ColorColumn /\\%>79v.*\\%<81v/')
  end,
})
