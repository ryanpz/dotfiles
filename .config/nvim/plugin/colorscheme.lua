local palette = {
  bg = 'NONE',
  fg = '#ffffff',
  selection = '#44475a',
  comment = '#828282',
  red = '#ff5555',
  orange = '#ffb86c',
  yellow = '#f1fa8c',
  green = '#50fa7b',
  cyan = '#8be9fd',
  blue = '#4cc0ff',
  purple = '#bd93f9',
  pink = '#ff79c6',
  bright_red = '#ff6e6e',
  bright_cyan = '#a4ffff',
  menu = '#202020',
  menu_alt = '#242424',
  nontext = '#3b4048',
  black = '#000000',
  added_bg = '#00381f',
  added_fg = '#a0e0a0',
  changed_bg = '#004065',
  changed_fg = '#b9c6e0',
  removed_bg = '#4f1119',
  removed_fg = '#ffbfbf',
  search_bg = '#e8ff00',
  inc_search_bg = '#ff9200',
}

local set_groups = function(p)
  local groups = {
    ColorColumn = { bg = p.selection },
    Conceal = { link = 'NonText' },
    CurSearch = { fg = p.black, bg = p.inc_search_bg },
    Cursor = { reverse = true },
    lCursor = { link = 'Cursor' },
    CursorIM = { link = 'Cursor' },
    CursorColumn = { bg = p.selection },
    CursorLine = { bg = p.selection },
    Directory = { fg = p.cyan },
    DiffAdd = { fg = p.added_fg, bg = p.added_bg },
    DiffChange = { fg = p.changed_fg, bg = p.changed_bg },
    DiffDelete = { fg = p.removed_fg, bg = p.removed_bg },
    DiffText = { fg = p.black, bg = p.blue },
    EndOfBuffer = { link = 'NonText' },
    TermCursor = { link = 'Cursor' },
    ErrorMsg = { fg = p.bright_red },
    WinSeparator = { fg = p.comment },
    Folded = { fg = p.comment },
    FoldColumn = { link = 'SignColumn' },
    SignColumn = { link = 'LineNr' },
    IncSearch = { link = 'CurSearch' },
    Substitute = { link = 'Search' },
    LineNr = { fg = p.comment },
    LineNrAbove = { link = 'LineNr' },
    LineNrBelow = { link = 'LineNr' },
    CursorLineNr = { fg = p.fg, bold = true },
    CursorLineFold = { link = 'FoldColumn' },
    CursorLineSign = { link = 'SignColumn' },
    MatchParen = { bg = p.selection },
    ModeMsg = { fg = p.cyan },
    MsgArea = {},
    MsgSeparator = { link = 'StatusLine' },
    MoreMsg = { fg = p.cyan },
    NonText = { fg = p.nontext },
    Normal = { fg = p.fg, bg = p.bg },
    NormalFloat = { fg = p.fg, bg = p.menu_alt },
    FloatBorder = { link = 'Normal' },
    FloatTitle = { link = 'Title' },
    FloatFooter = { link = 'FloatTitle' },
    NormalNC = { link = 'Normal' },
    Pmenu = { fg = p.fg, bg = p.menu },
    PmenuSel = { fg = p.fg, bg = p.selection },
    PmenuKind = { link = 'Pmenu' },
    PmenuKindSel = { link = 'PmenuSel' },
    PmenuExtra = { link = 'Pmenu' },
    PmenuExtraSel = { link = 'PmenuSel' },
    PmenuSbar = { bg = p.menu_alt },
    PmenuThumb = { bg = p.selection },
    PmenuMatch = { bold = true },
    PmenuMatchSel = { bold = true },
    ComplMatchIns = {},
    Question = { fg = p.purple },
    QuickFixLine = { fg = p.black, bg = p.yellow },
    Search = { fg = p.black, bg = p.search_bg },
    SnippetTabstop = { bg = p.selection },
    SpecialKey = { link = 'NonText' },
    SpellBad = { fg = p.bright_red, underline = true },
    SpellCap = { fg = p.yellow },
    SpellLocal = { fg = p.yellow },
    SpellRare = { fg = p.yellow },
    StatusLine = { fg = p.comment, bold = true },
    StatusLineNC = { fg = p.comment },
    StatusLineTerm = { link = 'StatusLine' },
    StatusLineTermNC = { link = 'StatusLineNC' },
    TabLine = { fg = p.comment, bg = p.menu_alt },
    TabLineFill = { link = 'TabLine' },
    TabLineSel = { fg = p.comment, bold = true },
    Title = { fg = p.cyan },
    Visual = { bg = p.selection },
    VisualNOS = { link = 'Visual' },
    WarningMsg = { fg = p.yellow },
    Whitespace = { link = 'NonText' },
    WildMenu = { link = 'PmenuSel' },
    WinBar = { link = 'StatusLine' },
    WinBarNC = { link = 'StatusLineNC' },
    Comment = { fg = p.comment },
    Constant = { fg = p.purple },
    String = { fg = p.yellow },
    Character = { fg = p.pink },
    Number = { link = 'Constant' },
    Boolean = { link = 'Constant' },
    Float = { link = 'Constant' },
    Identifier = { link = 'Normal' },
    Function = { fg = p.green },
    Statement = { fg = p.pink },
    Conditional = { link = 'Statement' },
    Repeat = { link = 'Statement' },
    Label = { link = 'Statement' },
    Operator = { fg = p.pink },
    Keyword = { link = 'Statement' },
    Exception = { link = 'Statement' },
    PreProc = { fg = p.pink },
    Include = { link = 'PreProc' },
    Define = { link = 'PreProc' },
    Macro = { link = 'PreProc' },
    PreCondit = { link = 'PreProc' },
    Type = { fg = p.cyan },
    StorageClass = { fg = p.pink },
    Structure = { fg = p.pink },
    Typedef = { fg = p.pink },
    Special = { fg = p.pink },
    SpecialChar = { link = 'Special' },
    Tag = { fg = p.cyan },
    Delimiter = { link = 'Normal' },
    SpecialComment = { fg = p.cyan, italic = true },
    Debug = { link = 'Special' },
    Underlined = { fg = p.cyan, underline = true },
    Ignore = { link = 'Normal' },
    Error = { fg = p.bright_red },
    Todo = { fg = p.purple, bold = true, italic = true },
    Added = { fg = p.green },
    Changed = { fg = p.blue },
    Removed = { fg = p.red },
    DiagnosticError = { fg = p.red },
    DiagnosticWarn = { fg = p.yellow },
    DiagnosticInfo = { fg = p.cyan },
    DiagnosticHint = { fg = p.cyan },
    DiagnosticOk = { fg = p.green },
    DiagnosticVirtualTextError = { link = 'DiagnosticError' },
    DiagnosticVirtualTextWarn = { link = 'DiagnosticWarn' },
    DiagnosticVirtualTextInfo = { link = 'DiagnosticInfo' },
    DiagnosticVirtualTextHint = { link = 'DiagnosticHint' },
    DiagnosticVirtualTextOk = { link = 'DiagnosticOk' },
    DiagnosticUnderlineError = { underline = true, sp = p.red },
    DiagnosticUnderlineWarn = { underline = true, sp = p.yellow },
    DiagnosticUnderlineInfo = { underline = true, sp = p.cyan },
    DiagnosticUnderlineHint = { underline = true, sp = p.cyan },
    DiagnosticUnderlineOk = { underline = true, sp = p.green },
    DiagnosticFloatingError = { link = 'DiagnosticError' },
    DiagnosticFloatingWarn = { link = 'DiagnosticWarn' },
    DiagnosticFloatingInfo = { link = 'DiagnosticInfo' },
    DiagnosticFloatingHint = { link = 'DiagnosticHint' },
    DiagnosticFloatingOk = { link = 'DiagnosticOk' },
    DiagnosticSignError = { link = 'DiagnosticError' },
    DiagnosticSignWarn = { link = 'DiagnosticWarn' },
    DiagnosticSignInfo = { link = 'DiagnosticInfo' },
    DiagnosticSignHint = { link = 'DiagnosticHint' },
    DiagnosticSignOk = { link = 'DiagnosticOk' },
    DiagnosticDeprecated = { strikethrough = true },
    DiagnosticUnnecessary = { link = 'Comment' },
    ['@variable'] = { link = 'Normal' },
    ['@variable.builtin'] = { fg = p.purple },
    ['@variable.parameter'] = { fg = p.orange },
    ['@variable.parameter.builtin'] = { link = 'Special' },
    ['@variable.member'] = { fg = p.orange },
    ['@constant'] = { link = 'Constant' },
    ['@constant.builtin'] = { link = 'Constant' },
    ['@constant.macro'] = { fg = p.cyan },
    ['@module'] = { fg = p.orange },
    ['@module.builtin'] = { link = 'Special' },
    ['@label'] = { fg = p.cyan },
    ['@string'] = { link = 'String' },
    ['@string.documentation'] = { link = 'String' },
    ['@string.regexp'] = { link = '@string.special' },
    ['@string.escape'] = { fg = p.cyan },
    ['@string.special'] = { link = 'SpecialChar' },
    ['@string.special.symbol'] = { fg = p.purple },
    ['@string.special.path'] = { link = 'Special' },
    ['@string.special.url'] = { link = 'Underlined' },
    ['@character'] = { link = 'Character' },
    ['@character.special'] = { link = 'SpecialChar' },
    ['@boolean'] = { link = 'Boolean' },
    ['@number'] = { link = 'Number' },
    ['@number.float'] = { link = 'Float' },
    ['@type'] = { link = 'Type' },
    ['@type.builtin'] = { fg = p.bright_cyan },
    ['@type.definition'] = { link = 'Typedef' },
    ['@type.qualifier'] = { fg = p.pink },
    ['@attribute'] = { fg = p.green },
    ['@attribute.builtin'] = { fg = p.cyan },
    ['@property'] = { link = '@variable.member' },
    ['@function'] = { link = 'Function' },
    ['@function.builtin'] = { fg = p.cyan },
    ['@function.call'] = { link = 'Function' },
    ['@function.macro'] = { link = 'Function' },
    ['@function.method'] = { link = 'Function' },
    ['@function.method.call'] = { link = 'Function' },
    ['@constructor'] = { fg = p.cyan },
    ['@operator'] = { link = 'Operator' },
    ['@keyword'] = { link = 'Keyword' },
    ['@keyword.coroutine'] = { link = 'Keyword' },
    ['@keyword.function'] = { link = 'Keyword' },
    ['@keyword.operator'] = { link = 'Operator' },
    ['@keyword.import'] = { link = 'Include' },
    ['@keyword.type'] = { link = 'Keyword' },
    ['@keyword.modifier'] = { link = 'Keyword' },
    ['@keyword.repeat'] = { link = 'Repeat' },
    ['@keyword.return'] = { link = 'Keyword' },
    ['@keyword.debug'] = { link = 'Keyword' },
    ['@keyword.exception'] = { fg = p.purple },
    ['@keyword.conditional'] = { link = 'Conditional' },
    ['@keyword.conditional.ternary'] = { link = 'Operator' },
    ['@keyword.directive'] = { link = 'PreProc' },
    ['@keyword.directive.define'] = { link = 'Define' },
    ['@punctuation.delimiter'] = { link = 'Delimiter' },
    ['@punctuation.bracket'] = { link = 'Normal' },
    ['@punctuation.special'] = { link = 'Special' },
    ['@comment'] = { link = 'Comment' },
    ['@comment.documentation'] = { link = 'Comment' },
    ['@comment.error'] = { link = 'DiagnosticError' },
    ['@comment.warning'] = { link = 'DiagnosticWarn' },
    ['@comment.todo'] = { link = 'Todo' },
    ['@comment.note'] = { link = 'DiagnosticInfo' },
    ['@markup.strong'] = { fg = p.orange, bold = true },
    ['@markup.italic'] = { italic = true },
    ['@markup.strikethrough'] = { strikethrough = true },
    ['@markup.underline'] = { underline = true },
    ['@markup.heading'] = { fg = p.pink, bold = true },
    ['@markup.quote'] = { fg = p.orange },
    ['@markup.math'] = { fg = p.cyan },
    ['@markup.link'] = { fg = p.cyan },
    ['@markup.link.label'] = { fg = p.cyan },
    ['@markup.link.url'] = { fg = p.bright_cyan, underline = true, italic = true },
    ['@markup.raw'] = { fg = p.yellow },
    ['@markup.raw.block'] = { fg = p.yellow },
    ['@markup.list'] = { fg = p.purple },
    ['@markup.list.checked'] = { fg = p.green },
    ['@markup.list.unchecked'] = { fg = p.comment },
    ['@diff.plus'] = { link = 'Added' },
    ['@diff.minus'] = { link = 'Removed' },
    ['@diff.delta'] = { link = 'Changed' },
    ['@tag'] = { link = 'Special' },
    ['@tag.builtin'] = { link = 'Special' },
    ['@tag.attribute'] = { fg = p.green },
    ['@tag.delimiter'] = { link = 'Normal' },
  }

  for group, parameters in pairs(groups) do
    vim.api.nvim_set_hl(0, group, parameters)
  end
end

vim.o.termguicolors = true
if vim.g.colors_name then
  vim.cmd.highlight('clear')
  vim.cmd.syntax('reset')
end
vim.g.colors_name = 'rycolor'

set_groups(palette)

vim.api.nvim_create_autocmd('BufEnter', {
  pattern = '*',
  callback = function()
    vim.cmd.match('ColorColumn /\\%>79v.*\\%<81v/')
  end,
})
